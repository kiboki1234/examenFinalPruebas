name: CI/CD — Clima & Conversión

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Para que la acción de Firebase pueda comentar en el PR
permissions:
  contents: read
  pull-requests: write

# Evita jobs duplicados si haces pushes seguidos
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Lint & Test (coverage ≥ 80%)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Mostrar versiones
        run: |
          node -v
          npm -v

      # Importante: npm ci requiere package-lock.json sincronizado con package.json
      # Si aquí falla con EUSAGE, alinea el lockfile localmente (rm -rf node_modules package-lock.json && npm i) y haz commit.
      - name: Instalar dependencias (npm ci)
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint

      # Tu jest.config (o jest.config.cjs/esm) debe exigir coverageThreshold ≥ 80
      - name: Test (con cobertura)
        run: npm test -- --coverage

      # (Opcional) Sube el reporte de cobertura como artefacto
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage
          if-no-files-found: ignore

      # Si falla npm, imprime los logs para depurar
      - name: Dump npm debug logs on failure
        if: failure()
        run: |
          echo "Mostrando npm debug logs..."
          find ~/.npm/_logs -type f -name '*-debug-*.log' -print -exec sed -n '1,200p' {} \;

  deploy:
    name: Firebase Hosting Deploy
    needs: ci
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Preview or Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
          channelId: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'live' }}